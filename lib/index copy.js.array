(function (factory) {
    typeof define === 'function' && define.amd ? define(factory) :
    factory();
})((function () { 'use strict';

    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSideBar = void 0;
  
    var tslib_1 = require("tslib");
    var startCase_1 = tslib_1.__importDefault(require("lodash/startCase"));
    var sortBy_1 = tslib_1.__importDefault(require("lodash/sortBy"));
    var remove_1 = tslib_1.__importDefault(require("lodash/remove"));
    var path_1 = require("path");
    var glob_1 = tslib_1.__importDefault(require("glob"));
    // handle md file name
    const { readdirSync, readFileSync } = require("fs");
    const matter = require("gray-matter");
    
    function getFrontMatterTitleSync(filepath) {
        const { data: frontMatter, content } = matter( readFileSync(filepath));
        return frontMatter.title;
    }
    
    function sideSync(dir, isRoot=true)
    {
        var filenames = readdirSync(dir,{ withFileTypes: true });
    
        if (!filenames)
        {
            return {};
        }
        
        
        var sidebar= {};
        var result = [];
    

        sidebar.text= getFrontMatterTitleSync(`${dir}/index.md`);
        sidebar.link = dir + "/index.md";
        // sidebar.collapsible = isRoot;
        // sidebar.collapsed = isRoot;
        sidebar.items = [];
        
        result.push(sidebar);

        for (const f of filenames.filter((e) => e.name !== 'index.md' )) // .filter((f) => f.name.endsWith(".md") || (!f.name.startsWith(".") && f.isDirectory())))
        {
            if (f.name.endsWith(".md") )
            {
                var fname = `${dir}/${f.name}`;
                sidebar.items.push( { 'text':  getFrontMatterTitleSync(`${dir}/${f.name}`), 'link': `${f.name}` });
            }
            else if (!f.name.startsWith(".") && f.isDirectory())
            {
                var subsidebar = sideSync(`${dir}/${f.name}`);
                result = [...result, ...subsidebar];
            }
        }

        return result;
    }
    






    /**
     * Returns `sidebar` configuration for VitePress calculated using structrue of directory and files in given path.
     * @param   {String}    rootDir   - Directory to get configuration for.
     * @param   {Options}    options   - Option to create configuration.
     */
    var getSideBar = function (rootDir, options) {
        if (rootDir === void 0) { rootDir = './'; }
        
        var sidebar =  sideSync(rootDir);
        console.info (`RETURNING SIDEBAR FOR ${rootDir}:`);
        console.log (sidebar);
        return sidebar;
    };
    exports.getSideBar = getSideBar;

}));
